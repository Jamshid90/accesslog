// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: accesslog/service.proto

package accesslog

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("accesslog/service.proto", fileDescriptor_236e92e3a2086b5a) }

var fileDescriptor_236e92e3a2086b5a = []byte{
	// 161 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4f, 0x4c, 0x4e, 0x4e,
	0x2d, 0x2e, 0xce, 0xc9, 0x4f, 0xd7, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28,
	0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x84, 0x4b, 0x48, 0x21, 0xa9, 0xc9, 0x4d, 0x2d, 0x2e, 0x4e, 0x4c,
	0x87, 0xaa, 0x31, 0x5a, 0xc7, 0xc8, 0x25, 0xe0, 0x08, 0x96, 0xf3, 0xc9, 0x4f, 0x0f, 0x86, 0x68,
	0x17, 0xf2, 0xe7, 0x62, 0x73, 0x2e, 0x4a, 0x4d, 0x2c, 0x49, 0x15, 0x52, 0xd4, 0x83, 0x6b, 0xd4,
	0x83, 0x2b, 0x83, 0xc8, 0x05, 0xa5, 0x16, 0x96, 0xa6, 0x16, 0x97, 0x48, 0x29, 0xe1, 0x53, 0x52,
	0x5c, 0x90, 0x9f, 0x57, 0x9c, 0x2a, 0xe4, 0xc9, 0xc5, 0xe2, 0x93, 0x59, 0x5c, 0x22, 0x24, 0x8f,
	0x4d, 0x2d, 0x48, 0x06, 0x66, 0x98, 0x02, 0x6e, 0x05, 0x10, 0xa3, 0x9c, 0x04, 0x4e, 0x3c, 0x92,
	0x63, 0xbc, 0xf0, 0x48, 0x8e, 0xf1, 0xc1, 0x23, 0x39, 0xc6, 0x19, 0x8f, 0xe5, 0x18, 0x92, 0xd8,
	0xc0, 0x3e, 0x31, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0xc7, 0x04, 0xbd, 0xe1, 0x08, 0x01, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AccessLogServiceClient is the client API for AccessLogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AccessLogServiceClient interface {
	Create(ctx context.Context, in *AccessLogCreateRequest, opts ...grpc.CallOption) (*AccessLogCreateResponse, error)
	List(ctx context.Context, in *AccessLogListRequest, opts ...grpc.CallOption) (*AccessLogListResponse, error)
}

type accessLogServiceClient struct {
	cc *grpc.ClientConn
}

func NewAccessLogServiceClient(cc *grpc.ClientConn) AccessLogServiceClient {
	return &accessLogServiceClient{cc}
}

func (c *accessLogServiceClient) Create(ctx context.Context, in *AccessLogCreateRequest, opts ...grpc.CallOption) (*AccessLogCreateResponse, error) {
	out := new(AccessLogCreateResponse)
	err := c.cc.Invoke(ctx, "/accesslog.AccessLogService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessLogServiceClient) List(ctx context.Context, in *AccessLogListRequest, opts ...grpc.CallOption) (*AccessLogListResponse, error) {
	out := new(AccessLogListResponse)
	err := c.cc.Invoke(ctx, "/accesslog.AccessLogService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccessLogServiceServer is the server API for AccessLogService service.
type AccessLogServiceServer interface {
	Create(context.Context, *AccessLogCreateRequest) (*AccessLogCreateResponse, error)
	List(context.Context, *AccessLogListRequest) (*AccessLogListResponse, error)
}

// UnimplementedAccessLogServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAccessLogServiceServer struct {
}

func (*UnimplementedAccessLogServiceServer) Create(ctx context.Context, req *AccessLogCreateRequest) (*AccessLogCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedAccessLogServiceServer) List(ctx context.Context, req *AccessLogListRequest) (*AccessLogListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}

func RegisterAccessLogServiceServer(s *grpc.Server, srv AccessLogServiceServer) {
	s.RegisterService(&_AccessLogService_serviceDesc, srv)
}

func _AccessLogService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessLogCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessLogServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accesslog.AccessLogService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessLogServiceServer).Create(ctx, req.(*AccessLogCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessLogService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessLogListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessLogServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accesslog.AccessLogService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessLogServiceServer).List(ctx, req.(*AccessLogListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AccessLogService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "accesslog.AccessLogService",
	HandlerType: (*AccessLogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _AccessLogService_Create_Handler,
		},
		{
			MethodName: "List",
			Handler:    _AccessLogService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "accesslog/service.proto",
}
